-- Copyright (c) 2017 Scott Morrison. All rights reserved.
-- Released under Apache 2.0 license as described in the file LICENSE.
-- Authors: Stephen Morgan, Scott Morrison

import .functor
import .products
import .types

open categories
open categories.functor
open categories.products
open categories.types

namespace categories.opposites

universes u‚ÇÅ v‚ÇÅ u‚ÇÇ v‚ÇÇ

def op (C : Type u‚ÇÅ) : Type u‚ÇÅ := C

notation C `·µí·µñ` := op C

section
variable {C : Type u‚ÇÅ}
variable [ùíû : category.{u‚ÇÅ v‚ÇÅ} C]
include ùíû

instance Opposite : category.{u‚ÇÅ v‚ÇÅ} (C·µí·µñ) := 
{ Hom            := Œª X Y : C, Y ‚ü∂ X,
  compose        := Œª _ _ _ f g, g ‚â´ f,
  identity       := Œª X, ùüô X,
  left_identity  := begin
                      -- `obviously'` says:
                      intros,
                      simp
                    end,
  right_identity := begin
                      -- `obviously'` says:
                      intros,
                      simp
                    end,
  associativity  := begin
                      -- `obviously'` says:
                      intros,
                      simp
                    end }

variable {D : Type u‚ÇÇ}
variable [ùíü : category.{u‚ÇÇ v‚ÇÇ} D]
include ùíü

definition OppositeFunctor (F : C ‚Üù D) : (C·µí·µñ) ‚Üù (D·µí·µñ) := 
{ onObjects     := Œª X, F.onObjects X, -- notation (F +> X) fails here, because C ‚â† C·µí·µñ
  onMorphisms   := Œª X Y f, F &> f,
  identities    := begin
                     -- `obviously'` says:
                     intros,
                     erw [Functor.identities_lemma], refl,
                   end,
  functoriality := begin
                     -- `obviously'` says: 
                     intros,
                     erw [Functor.functoriality_lemma], refl,
                   end }

@[simp,ematch] lemma ContravariantFunctor.functoriality
  (F : (C·µí·µñ) ‚Üù D)
  (X Y Z : (C·µí·µñ))
  (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) :
    F &> ((@categories.category.compose C _ _ _ _ g f) : X ‚ü∂ Z) = (F &> f) ‚â´ (F &> g) := 
    begin
      -- `obviously'` says:
      erw [Functor.functoriality_lemma]
    end

@[simp,ematch] lemma ContravariantFunctor.identities
  (F : (C·µí·µñ) ‚Üù D) (X : (C·µí·µñ)) : (F &> (@categories.category.identity C _ X)) = ùüô (F +> X) :=
  begin
    -- `obviously'` says:
    erw [Functor.identities_lemma],
  end
                   
end

definition HomPairing (C : Type u‚ÇÅ) [category.{u‚ÇÅ v‚ÇÅ} C] : Functor (C·µí·µñ √ó C) (Type v‚ÇÅ) := 
{ onObjects     := Œª p, @category.Hom C _ p.1 p.2,
  onMorphisms   := Œª X Y f, Œª h, f.1 ‚â´ h ‚â´ f.2,
  identities    := begin
                     -- `obviously'` says: 
                     intros,
                     apply funext,
                     intros,
                     cases X,
                     dsimp,
                     dsimp at *,
                     simp,
                     erw [category.left_identity_lemma],
                   end,
  functoriality := begin
                      -- `obviously'` says:
                      intros,
                      apply funext,
                      intros,
                      cases g, cases f, cases Z, cases Y, cases X,
                      dsimp,
                      dsimp at *,
                      simp,
                      dsimp,
                      erw [category.associativity_lemma]
                   end }

end categories.opposites
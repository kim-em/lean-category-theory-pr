-- Copyright (c) 2017 Scott Morrison. All rights reserved.
-- Released under Apache 2.0 license as described in the file LICENSE.
-- Authors: Stephen Morgan, Scott Morrison

import ..category
import ..isomorphism
import ..functor
import ..natural_transformation

namespace categories.types

open categories
open categories.isomorphism
open categories.functor

universes u v w

instance CategoryOfTypes : large_category (Type u) :=
{ Hom            := Œª a b, (a ‚Üí b),
  identity       := Œª a, id,
  compose        := Œª _ _ _ f g, g ‚àò f,
  left_identity  := begin
                     -- `obviously'` says:
                     intros,
                     refl
                   end,
  right_identity := begin
                     -- `obviously'` says:
                     intros,
                     refl
                   end,
  associativity  := begin
                     -- `obviously'` says:
                     intros,
                     refl
                   end }

@[simp] lemma Types.Hom {Œ± Œ≤ : Type u} : (Œ± ‚ü∂ Œ≤) = (Œ± ‚Üí Œ≤) := by refl  
@[simp] lemma Types.identity {Œ± : Type u} (a : Œ±) : (ùüô Œ± : Œ± ‚Üí Œ±) a = a := by refl
@[simp] lemma Types.compose {Œ± Œ≤ Œ≥ : Type u} (f : Œ± ‚Üí Œ≤) (g : Œ≤ ‚Üí Œ≥) (a : Œ±) : (((f : Œ± ‚ü∂ Œ≤) ‚â´ (g : Œ≤ ‚ü∂ Œ≥)) : Œ± ‚ü∂ Œ≥) a = g (f a) := by refl

variables {C : Type (v+1)} [large_category C] (F G H : C ‚Üù (Type u)) {X Y Z : C} 
variables (œÉ : F ‚üπ G) (œÑ : G ‚üπ H) 

@[simp,ematch] lemma Functor_to_Types.functoriality (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) (a : F +> X) : (F &> (f ‚â´ g)) a = (F &> g) ((F &> f) a) :=
begin 
  -- `obviously'` says:
  simp,
end

@[simp,ematch] lemma Functor_to_Types.identities (a : F +> X) : (F &> (ùüô X)) a = a := 
begin
  -- `obviously'` says:
  simp,
end

@[ematch] lemma Functor_to_Types.naturality (f : X ‚ü∂ Y) (x : F +> X) : œÉ.components Y ((F &> f) x) = (G &> f) (œÉ.components X x) := 
begin 
  have p := œÉ.naturality_lemma f,
  exact congr_fun p x,
end.

@[simp] lemma Functor_to_Types.vertical_composition (x : F +> X) : (œÉ ‚äü œÑ).components X x = œÑ.components X (œÉ.components X x) :=
begin 
  -- `obviously'` says:
  refl
end  
 
variables {D : Type (w+1)} [large_category D] (I J : D ‚Üù C) (œÅ : I ‚üπ J) {W : D}
@[simp] lemma Functor_to_Types.horizontal_composition (x : (I ‚ãô F) +> W) : (œÅ ‚ó´ œÉ).components W x = (G &> œÅ.components W) (œÉ.components (I +> W) x) := 
begin
  -- `obviously'` says:
  refl
end

definition UniverseLift : (Type u) ‚Üù (Type (max u v)) := 
{ onObjects     := Œª X, ulift.{v} X,
  onMorphisms   := Œª X Y f, Œª x : ulift.{v} X, ulift.up (f x.down),
  identities    := begin
                     -- `obviously'` says:
                     intros,
                     apply funext,
                     intros,
                     apply ulift.ext,
                     refl
                   end,
  functoriality := begin
                     -- `obviously'` says:
                     intros,
                     refl
                   end }

end categories.types
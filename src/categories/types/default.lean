-- Copyright (c) 2017 Scott Morrison. All rights reserved.
-- Released under Apache 2.0 license as described in the file LICENSE.
-- Authors: Stephen Morgan, Scott Morrison

import ..category
import ..isomorphism
import ..functor
import ..natural_transformation

namespace categories.types

open categories
open categories.isomorphism
open categories.functor

universes u v w

instance CategoryOfTypes : category (Type u) :=
{
    Hom := Œª a b, (a ‚Üí b),
    identity := Œª a, id,
    compose  := Œª _ _ _ f g, g ‚àò f
}

variables {C : Type (v+1)} [category C] (F G H: Functor C (Type u)) {X Y Z : C} 
variables (œÉ : F ‚üπ G) (œÑ : G ‚üπ H) 

@[simp,search] lemma Functor_to_Types.functoriality (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) (a : F X) : (F &> (f ‚â´ g)) a = (F &> g) ((F &> f) a) := by obviously
@[simp,search] lemma Functor_to_Types.identities (a : F X) : (F &> (ùüô X)) a = a := by obviously

@[search] lemma Functor_to_Types.naturality (f : X ‚ü∂ Y) (x : F X) : œÉ.components Y ((F &> f) x) = (G &> f) (œÉ.components X x) := 
begin 
  have p := œÉ.naturality_lemma f,
  tidy,
end.
@[simp] lemma Functor_to_Types.vertical_composition (x : F X) : (œÉ ‚äü œÑ).components X x = œÑ.components X (œÉ.components X x) := by obviously 

-- TODO
-- variables {D : Type (w+1)} [category D] (I J : D ‚Üù C) (œÅ : I ‚üπ J) {W : D}
-- @[simp] lemma Functor_to_Types.horizontal_composition (x : (I ‚ãô F) W) : (œÅ ‚ó´ œÉ).components W x = sorry := by obviously 


definition UniverseLift : Functor (Type u) (Type (u+1)) := {
    onObjects := Œª X, ulift.{u+1} X,
    onMorphisms := Œª X Y f, Œª x : ulift.{u+1} X, ulift.up (f x.down)
}

definition Bijection (Œ± Œ≤ : Type u) := Isomorphism Œ± Œ≤ 

@[simp] definition Bijection.witness_1 {Œ± Œ≤ : Type u} (iso : Bijection Œ± Œ≤) (x : Œ±) : iso.inverse (iso.morphism x) = x :=
begin
  have p := iso.witness_1_lemma, unfold_projs at p,
  tidy,
end
@[simp] definition Bijection.witness_2 {Œ± Œ≤ : Type u} (iso : Bijection Œ± Œ≤) (x : Œ≤) : iso.morphism (iso.inverse x) = x :=
begin
  have p := iso.witness_2_lemma, unfold_projs at p,
  tidy,
end

-- TODO the @s are unpleasant here
@[simp] definition is_Isomorphism_in_Types.witness_1 {Œ± Œ≤ : Type u} (f : Œ± ‚Üí Œ≤) (h : @is_Isomorphism _ _ Œ± Œ≤ f) (x : Œ±) : h.inverse (f x) = x :=
begin
  have p := h.witness_1, unfold_projs at p,
  tidy,
end
@[simp] definition is_Isomorphism_in_Types.witness_2 {Œ± Œ≤ : Type u} (f : Œ± ‚Üí Œ≤) (h : @is_Isomorphism _ _ Œ± Œ≤ f) (x : Œ≤) : f (h.inverse x) = x :=
begin
  have p := h.witness_2, unfold_projs at p,
  tidy,
end


end categories.types

-- Copyright (c) 2017 Scott Morrison. All rights reserved.
-- Released under Apache 2.0 license as described in the file LICENSE.
-- Authors: Stephen Morgan, Scott Morrison

import ..category
import ..isomorphism
import ..functor
import ..natural_transformation

namespace categories.types

open categories
open categories.isomorphism
open categories.functor

universes u v w

instance CategoryOfTypes : category (Type u) :=
{ Hom := Œª a b, (a ‚Üí b),
  identity := Œª a, id,
  compose  := Œª _ _ _ f g, g ‚àò f,
  left_identity    := by obviously',
  right_identity   := by obviously',
  associativity    := by obviously' }
  
variables {C : Type (v+1)} [category C] (F G H: Functor C (Type u)) {X Y Z : C} 
variables (œÉ : F ‚üπ G) (œÑ : G ‚üπ H) 

@[simp,ematch] lemma Functor_to_Types.functoriality (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) (a : F X) : (F &> (f ‚â´ g)) a = (F &> g) ((F &> f) a) :=
begin 
  -- `obviously'` says:
  simp!,
  refl
end

@[simp,ematch] lemma Functor_to_Types.identities (a : F X) : (F &> (ùüô X)) a = a := 
begin
  -- `obviously'` says:
  simp!,
  refl
end

@[ematch] lemma Functor_to_Types.naturality (f : X ‚ü∂ Y) (x : F X) : œÉ.components Y ((F &> f) x) = (G &> f) (œÉ.components X x) := 
begin 
  have p := œÉ.naturality_lemma f,
  exact congr_fun p x,
end.

@[simp] lemma Functor_to_Types.vertical_composition (x : F X) : (œÉ ‚äü œÑ).components X x = œÑ.components X (œÉ.components X x) :=
begin 
  -- `obviously'` says:
  refl
end  
 
variables {D : Type (w+1)} [category D] (I J : D ‚Üù C) (œÅ : I ‚üπ J) {W : D}
@[simp] lemma Functor_to_Types.horizontal_composition (x : (I ‚ãô F) W) : (œÅ ‚ó´ œÉ).components W x = (G &> œÅ.components W) (œÉ.components (I W) x) := 
begin
  -- `obviously'` says:
  refl
end

definition UniverseLift : Functor (Type u) (Type (u+1)) := 
{ onObjects := Œª X, ulift.{u+1} X,
  onMorphisms := Œª X Y f, Œª x : ulift.{u+1} X, ulift.up (f x.down),
  identities    := by obviously',
  functoriality := by obviously' }

end categories.types
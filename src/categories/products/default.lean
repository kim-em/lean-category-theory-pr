-- Copyright (c) 2017 Scott Morrison. All rights reserved.
-- Released under Apache 2.0 license as described in the file LICENSE.
-- Authors: Stephen Morgan, Scott Morrison
import ..functor_categories

open categories
open categories.functor
open categories.natural_transformation
open categories.functor_categories

namespace categories.products

universes u‚ÇÅ v‚ÇÅ u‚ÇÇ v‚ÇÇ u‚ÇÉ v‚ÇÉ u‚ÇÑ v‚ÇÑ

section
variable (C : Type u‚ÇÅ)
variable [category.{u‚ÇÅ v‚ÇÅ} C]
variable (D : Type u‚ÇÇ)
variable [category.{u‚ÇÇ v‚ÇÇ} D]

instance ProductCategory : category.{(max u‚ÇÅ u‚ÇÇ) (max v‚ÇÅ v‚ÇÇ)} (C √ó D) := 
{ Hom            := Œª X Y, ((X.1) ‚ü∂ (Y.1)) √ó ((X.2) ‚ü∂ (Y.2)),
  identity       := Œª X, ‚ü® ùüô (X.1), ùüô (X.2) ‚ü©,
  compose        := Œª _ _ _ f g, (f.1 ‚â´ g.1, f.2 ‚â´ g.2),
  left_identity  := begin
                      -- `obviously'` says:
                      intros,
                      automatic_induction,
                      dsimp,
                      dsimp at *,
                      simp
                    end,
  right_identity := begin
                      -- `obviously'` says:
                      intros,
                      automatic_induction,
                      dsimp,
                      dsimp at *,
                      simp
                    end,
  associativity  := begin
                      -- `obviously'` says:
                      intros,
                      automatic_induction,
                      dsimp,
                      dsimp at *,
                      simp
                    end }     
end 

instance ProductCategory'   (C : Type u‚ÇÅ) [category.{u‚ÇÅ v‚ÇÅ} C] (D : Type u‚ÇÅ) [category.{u‚ÇÅ v‚ÇÅ} D] : category.{u‚ÇÅ v‚ÇÅ} (C √ó D) := products.ProductCategory C D

section
variable {C : Type u‚ÇÅ}
variable [ùíû : category.{u‚ÇÅ v‚ÇÅ} C]
variable {D : Type u‚ÇÇ}
variable [ùíü : category.{u‚ÇÇ v‚ÇÇ} D]
include ùíû ùíü

@[simp] lemma ProductCategory.identity {X : C} {Y : D} : ùüô (X, Y) = (ùüô X, ùüô Y) := by refl
@[simp] lemma ProductCategory.compose {P Q R : C} {S T U : D} (f : (P, S) ‚ü∂ (Q, T)) (g : (Q, T) ‚ü∂ (R, U)) : f ‚â´ g = (f.1 ‚â´ g.1, f.2 ‚â´ g.2) := by refl
end

definition RightInjectionAt (C : Type u‚ÇÅ) [category.{u‚ÇÅ v‚ÇÅ} C] {D : Type u‚ÇÅ} [category.{u‚ÇÅ v‚ÇÅ} D] (Z : D) : C ‚Üù (C √ó D) := 
{ onObjects     := Œª X, (X, Z),
  onMorphisms   := Œª X Y f, (f, ùüô Z),
  identities    := begin
                     -- `obviously'` says:
                     intros,
                     refl
                   end,
  functoriality := begin
                     -- `obviously'` says:
                     intros,
                     dsimp,
                     simp
                   end }

definition LeftInjectionAt {C : Type u‚ÇÅ} [category.{u‚ÇÅ v‚ÇÅ} C] (Z : C) (D : Type u‚ÇÅ) [category.{u‚ÇÅ v‚ÇÅ} D] : D ‚Üù (C √ó D) := 
{ onObjects     := Œª X, (Z, X),
  onMorphisms   := Œª X Y f, (ùüô Z, f),
  identities    := begin
                     -- `obviously'` says:
                     intros,
                     refl
                   end,
  functoriality := begin
                     -- `obviously'` says:
                     intros,
                     dsimp,
                     simp
                   end }

definition LeftProjection (C : Type u‚ÇÅ) [category.{u‚ÇÅ v‚ÇÅ} C] (Z : C) (D : Type u‚ÇÅ) [category.{u‚ÇÅ v‚ÇÅ} D] : (C √ó D) ‚Üù C := 
{ onObjects     := Œª X, X.1,
  onMorphisms   := Œª X Y f, f.1,
  identities    := begin
                     -- `obviously'` says:
                     intros,
                     refl
                   end,
  functoriality := begin
                     -- `obviously'` says:
                     intros,
                     refl
                   end }

definition RightProjection (C : Type u‚ÇÅ) [category.{u‚ÇÅ v‚ÇÅ} C] (Z : C) (D : Type u‚ÇÅ) [category.{u‚ÇÅ v‚ÇÅ} D] : (C √ó D) ‚Üù D := 
{ onObjects     := Œª X, X.2,
  onMorphisms   := Œª X Y f, f.2,
  identities    := begin
                     -- `obviously'` says:
                     intros,
                     refl
                   end,
  functoriality := begin
                     -- `obviously'` says:
                     intros,
                     refl
                   end }

section
variables {A : Type u‚ÇÅ}
 [ùíú : category.{u‚ÇÅ v‚ÇÅ} A]
 {B : Type u‚ÇÇ}
 [‚Ñ¨ : category.{u‚ÇÇ v‚ÇÇ} B]
 {C : Type u‚ÇÉ}
 [ùíû : category.{u‚ÇÉ v‚ÇÉ} C]
 {D : Type u‚ÇÑ}
 [ùíü : category.{u‚ÇÑ v‚ÇÑ} D]
include ùíú ‚Ñ¨ ùíû ùíü

definition ProductFunctor
 (F : A ‚Üù B) (G : C ‚Üù D) : (A √ó C) ‚Üù (B √ó D) :=
{ onObjects     := Œª X, (F +> X.1, G +> X.2),
  onMorphisms   := Œª _ _ f, (F &> f.1, G &> f.2),
  identities    := begin
                     -- `obviously'` says (something equivalent to):
                     intros,
                     cases X,
                     dsimp,
                     erw Functor.identities_lemma, 
                     erw Functor.identities_lemma,
                     refl,
                   end,
  functoriality := begin
                     -- `obviously'` says (something equivalent to):
                     intros,
                     cases Z, cases Y, cases X,
                     dsimp,
                     cases f, cases g,
                     dsimp,
                     dsimp at *,
                     erw Functor.functoriality_lemma,
                     erw Functor.functoriality_lemma,
                     refl
                   end }

notation F `√ó` G := ProductFunctor F G

@[simp,ematch] lemma ProductFunctor.onObjects   (F : A ‚Üù B) (G : C ‚Üù D) (a : A) (c : C) : (F √ó G) +> (a, c) = (F +> a, G +> c) := by refl
@[simp,ematch] lemma ProductFunctor.onMorphisms (F : A ‚Üù B) (G : C ‚Üù D) {a a' : A} {c c' : C} (f : (a, c) ‚ü∂ (a', c')) : (F √ó G).onMorphisms f = (F &> f.1, G &> f.2) := by refl

definition ProductNaturalTransformation 
{F G : A ‚Üù B} {H I : C ‚Üù D} (Œ± : F ‚üπ G) (Œ≤ : H ‚üπ I) : (F √ó H) ‚üπ (G √ó I) :=
{ components := Œª X, (Œ±.components X.1, Œ≤.components X.2),
  naturality := begin
                  -- `obviously'` says:
                  intros,
                  cases f, cases Y, cases X,
                  dsimp,
                  dsimp at *,
                  simp,
                  dsimp,
                  fsplit,
                  erw [NaturalTransformation.naturality_lemma],
                  erw [NaturalTransformation.naturality_lemma]
                end }

notation Œ± `√ó` Œ≤ := ProductNaturalTransformation Œ± Œ≤
end

end categories.products
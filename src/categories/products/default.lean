-- Copyright (c) 2017 Scott Morrison. All rights reserved.
-- Released under Apache 2.0 license as described in the file LICENSE.
-- Authors: Stephen Morgan, Scott Morrison
import ..functor_categories

open categories
open categories.functor
open categories.natural_transformation
open categories.functor_categories

namespace categories.products

universes u‚ÇÅ u‚ÇÇ u‚ÇÉ u‚ÇÑ

variable {A : Type (u‚ÇÅ+1)}
variable [category A]
variable {B : Type (u‚ÇÇ+1)}
variable [category B]
variable {C : Type (u‚ÇÉ+1)}
variable [category C]
variable {D : Type (u‚ÇÑ+1)}
variable [category D]

instance ProductCategory : category (C √ó D) := {
    Hom      := Œª X Y, ((X.1) ‚ü∂ (Y.1)) √ó ((X.2) ‚ü∂ (Y.2)),
    identity := Œª X, ‚ü® ùüô (X.1), ùüô (X.2) ‚ü©,
    compose  := Œª _ _ _ f g, (f.1 ‚â´ g.1, f.2 ‚â´ g.2)
 }

definition RightInjectionAt (Z : D) : C ‚Üù (C √ó D) := {
  onObjects     := Œª X, (X, Z),
  onMorphisms   := Œª X Y f, (f, ùüô Z)
}

definition LeftInjectionAt (Z : C) : D ‚Üù (C √ó D) := {
  onObjects     := Œª X, (Z, X),
  onMorphisms   := Œª X Y f, (ùüô Z, f)
}

definition LeftProjection : (C √ó D) ‚Üù C := 
{
  onObjects     := Œª X, X.1,
  onMorphisms   := Œª X Y f, f.1
}

definition RightProjection : (C √ó D) ‚Üù D := 
{
  onObjects     := Œª X, X.2,
  onMorphisms   := Œª X Y f, f.2
}

definition ProductFunctor (F : A ‚Üù B) (G : C ‚Üù D) : (A √ó C) ‚Üù (B √ó D) :=
{
  onObjects     := Œª X, (F X.1, G X.2),
  onMorphisms   := Œª _ _ f, (F &> f.1, G &> f.2)
}

namespace ProductFunctor
  notation F `√ó` G := ProductFunctor F G
end ProductFunctor

definition ProductNaturalTransformation
  {F G : A ‚Üù B} {H I : C ‚Üù D} 
  (Œ± : F ‚üπ G) (Œ≤ : H ‚üπ I) : (F √ó H) ‚üπ (G √ó I) :=
{
  components := Œª X, (Œ±.components X.1, Œ≤.components X.2)
}

namespace ProductNaturalTransformation
  notation Œ± `√ó` Œ≤ := ProductNaturalTransformation Œ± Œ≤
end ProductNaturalTransformation


end categories.products
